######################################################################################
BASE_URL = 'http://www.animetoon.eu'
ICON_COVER = "icon-cover.png"

RE_VIDEOFUN = Regex('http://s(.*)(?=".\s)')
RE_PLAY44 = Regex("http://.*gateway.*(?=')")
RE_THUMB = Regex('http://videofun.me/frames/(.*)(?=".\s)')
RE_CHEESE = Regex('http://stream.*(?=")')
RE_VIDZUR = Regex("http://.*videos.*(?=')")
RE_VIDEO44 = Regex('http://.*dl.*(?=")')
RE_BYZOO = Regex("http://beta.*(?=')")
RE_GOOGLEVIDEO = Regex("http(s?)://.*googlevideo.*(?=')")

sources = {
    "videofun" : RE_VIDEOFUN,
    "video44" : RE_VIDEO44,
    "vidzur" : RE_VIDZUR,
    "play44" : RE_PLAY44,
    "byzoo" : RE_BYZOO,
    "videozoo" : RE_PLAY44,
    "playbb" : RE_PLAY44,
    "easyvideo" : RE_GOOGLEVIDEO,
    "playpanda" : RE_GOOGLEVIDEO,
    "cheesestream" : RE_CHEESE
}
######################################################################################
# Loads thumbnail from videofun iframe if available.

def MetadataObjectForURL(url):
    url = url.split("??")[0] # first part of the url string is the animetoon episode url

    # Episode data from animetoons episode page.
    ep_data = HTML.ElementFromURL(url)
    show_data = HTML.ElementFromURL(ep_data.xpath("//div[@id='slink']/span/span/a/@href")[0])
    ep_title = ep_data.xpath("//div[@id='top_block']/h1/text()")[0].strip()

    # Show/Serie data from animetoons serie page to display for every episode.
    show_thumb = show_data.xpath("//img[@id='series_image']/@src")[0]
    show_genres = show_data.xpath("//span[@class='red_box']/a/text()")

    try: #TODO could try instead: float(show_data.xpath("//*[@id='rating_num']/text()")[0])
        show_rating = float(show_data.xpath("//span[@id='rating_num']/text()")[0])
    except:
        show_rating = 0.00

    try: #TODO could try instead: show_data.xpath("//*[@id='full_notes']/text()")[0].strip()
        show_summary = show_data.xpath("//div[@class='right_col']/div/div[2]/div/span[2]/text()")[0].strip()
    except:
        try:
            show_summary = show_data.xpath("//div[@id='series_details']/div[2]/div/text()")[0].strip()
        except:
            show_summary = show_data.xpath("//div[@id='series_details']/div/div/text()")[0].strip()

    return MovieObject(
        title = ep_title,
        thumb = Resource.ContentsOfURLWithFallback(url = show_thumb, fallback='icon-cover.png'),
        summary = show_summary,
        genres = show_genres,
        rating = show_rating,
        source_title = "AnimeToon.eu"
        )

######################################################################################
# All videos vary in codec and must be transcoded

@deferred
def MediaObjectsForURL(url):
# This function should create and return a list of media objects and part objects representing
# the media available at the given URL. Callbacks may be used if obtaining the final media
# location requires additional computation.

    mirror = url.split("??")[1]

    mirror_data = HTML.ElementFromURL(mirror)
    string_data = HTML.StringFromElement(mirror_data)

    for name, regex in sources.items():
        if mirror.find(name) >= 0:
            find_url = regex.search(string_data).group()
            url = String.Unquote(find_url, usePlus=False)
            Log(url)
            return [MediaObject(parts = [PartObject(key = url)])]
